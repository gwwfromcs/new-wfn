!
subroutine data_gather(ipr, myproc, nproc, indata, outdata, ng)
  !
  !     collects the array data from all procs to processor 0
  !
  use constants
  implicit none             ! implicit? no!
  !
m4_ifdef([INT4],[m4_define([MPI_INTEGER4],[MPI_INTEGER])])
m4_ifdef([CRAY],[m4_define([MPI_INTEGER4],[MPI_INTEGER])])
m4_ifdef([MPI],[include 'mpif.h'])
  !
  !     INPUT:
  !
  integer, intent(in) :: &
       myproc, nproc, &
       ipr, &                                                     ! print flag
       ng                                  ! number of vectors in LOCAL gspace
  complex(dp), intent(in) :: indata(*)                  ! the local data array 
  !
  !     OUTPUT:
  !     
  complex(dp), intent(out) :: outdata(*)               ! the global data array
  !
  !     --------- local variables ---------------------------
  !
  integer :: i, j, k, info
  integer, allocatable :: recvcount(:), displs(:)
  !
  if (nproc > 1) then
m4_ifdef([MPI],[
     !
     !        set up displs and recvcount arrays
     !
     allocate(recvcount(nproc))
     allocate(displs(nproc))
     recvcount = 0
     displs= 0

     displs(myproc + 1) = ng
     call mpi_allreduce(displs, recvcount, nproc, MPI_INTEGER4, &
          MPI_SUM, MPI_COMM_WORLD, info)

     j = 0
     do i = 1, nproc
        displs(i) = j
        j = j + recvcount(i)
     end do
     !
     !        now gather everything to processor 0
     !            
     call mpi_gatherv(indata, ng, MPI_DOUBLE_COMPLEX, &
          outdata, recvcount, displs, MPI_DOUBLE_COMPLEX, &
          0, MPI_COMM_WORLD, info)
     deallocate(recvcount)
     deallocate(displs)
])
  else
     do i = 1, ng
        outdata(i) = indata(i)
     end do
  end if
  !
  !     now processor 0 has the global data array
  !
  return

end subroutine data_gather


