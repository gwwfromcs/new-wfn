
!
!     find the lowest eigenvectors and eigenvalues for a given
!     Hamiltonian with a conjugate gradient minimization scheme
!
subroutine diag_ham_metal_gcg(ilog,time,iter,num_HPsi,pw_params,maxit,&
    iconv, neigmin,  neig, delta, eval, ham, x,occ,energy_diff,lrwfn)

  use all_to_all_module  
  include 'use.h'  
  implicit none  
  include 'interface.h'  
  include 'all_to_all.h'  
  include 'flibcalls.ph'  
  !
  !     INPUT/OUTPUT:
  !     ------------
  ! 
  integer, intent(inout) :: neig,&    ! max/real number of eigenvalues computed
            num_HPsi                  ! op count of H*Psi 
  !
  !     INPUT:
  !     -----
  !
  integer iter,ilog
  type(hamiltonian), intent(inout) :: ham    ! the hamiltonian to diagonalize
  type(pw_parameter), intent(in) :: pw_params            ! various parameters

  integer, intent(in) :: maxit, &                  ! max number of iterations
       neigmin               ! minimum number of eigenvalues to be computed

  real(dp), intent(in) :: delta                 ! accuracy of diagonalization
  real(dp), intent(in) :: &
       occ(neig),energy_diff                      ! occupations
  logical, intent(in) :: lrwfn            ! true if wavefn is to be reused
  !
  !     INPUT/OUTPUT:
  !     ------------
  !
  complex(dp), intent(inout) :: &
       x(*)                      ! start/final wave functions on input/output
  real(dp), intent(inout) :: &
       eval(neig + 1)                 ! start/final eigenvalues, eval(neig+1)
  real(dp) time(num_time)
  !
  !     OUTPUT:
  !     -------
  !
  logical, intent(out) :: iconv               ! true if converged, false else
  !
  !
  !     --------------------- local variables ----------------------
  !
  real(dp) :: t0, t1, t2, &                                ! timing variables
       oldrho, a, b, c, d, demax, de, lambda, eprecond, delrho,rho_init, &
       rho, &                                                 ! current error
       nops, &                                         ! number of operations
       egap                ! gap between highest computed and next eigenvalue
  real(dp)   num,energy_old,energy1,denom  
  integer :: myproc, ierrmall, mnew, mmax,nover_cnt,&
       diaginfo, &                  ! return value of diagonalization routine
       m, &                                       ! current number of vectors
       m_squared, &                                             ! square of m
       i, j, &                                                      ! dummies
       imax, &                                            ! largest gap index
       n, &                                                ! iteration number
       nreset, &                                 ! number of resets performed
       len                                                    ! gspace length
  complex(dp) :: dclambda,dclambda2, dclambdasq, dcgamma 
  !
  !     work arrays
  !
  complex(dp), allocatable :: &                               ! of size m x m
       s(:), eps(:)
  complex(dp), allocatable :: &                            ! of size nanl x m
       ews(:,:)  
  complex(dp), allocatable :: &                             ! of size len x m
       g(:,:), gold(:,:), gp(:,:), h(:,:), y(:,:)   
  integer, allocatable :: &                                       ! size of m
       iord(:)
  real(dp), allocatable :: rwork(:)  

  logical :: ishift, ireset, iconjug, prec_occ , dot_occ_tmp   
  !
  !          local routines
  real(dp), external :: trace, contract, average_ekin, gimmetime 
  real(dp) occ_wt

  t0 = gimmetime()  
  if (iand(pw_params%output(1), 8) == 8) t2 = t0 
  m = neig                                       ! start with maximum allowed
  m_squared = m * m  
  len = ham%gspace%length  
  myproc = ham%gspace%myproc  
  !
  !     allocate all the work spaces
  !
  allocate(s(m * m)) ; s = zzero
  allocate(eps(m * m)) ; eps = zzero  
  allocate(rwork(max(1, 3*m-2))) ; rwork = dzero  

  if (ham%vnloc%nvecs > 0 .and. .not. ham%pspot%NL_rspace(1) ) then  
     allocate(ews(ham%vnloc%nvecs, m))  
     ews = zzero
  end if
  allocate(g(len, m), stat = ierrmall)
  if (ierrmall /= 0) then  
     write(9, 930) 'g', len, m, ierrmall  
     call mystop  
  end if
  g = zzero  
  allocate(gold(len, m), stat = ierrmall)
  if (ierrmall /= 0) then  
     write(9, 930) 'gold', len, m, ierrmall  
     call mystop  
  end if
  gold = zzero
  allocate(h(len, m), stat = ierrmall)
  if (ierrmall /= 0) then  
     write(9, 930) 'h', len, m, ierrmall  
     call mystop  
  end if
  h = zzero
  allocate(y(len, m), stat = ierrmall)
  if (ierrmall /= 0) then  
     write(9, 930) 'y', len, m, ierrmall  
     call mystop  
  end if
  y = zzero  
  allocate(gp(len, m), stat = ierrmall)
  if (ierrmall /= 0) then  
     write(9, 930) 'gp', len, m, ierrmall  
     call mystop  
  end if
  gp = zzero  

  allocate(iord(m))
  iord = 0  

  ireset = .true.                                ! first step is like a reset
  iconjug = .false.                      ! don't make conjugate in first step
  ishift = .true.               ! want to shift if error has decreased enough
  rho = 1.0d4                                       ! give some initial error
  nops = 0  

  if (iter .eq. 1) then
        call cheap_overlap_matrix(s(1), x(1), m, len) 
        call occsp_sqrtinv_scal('U','n',myproc,s,m,ham%gspace%nproc)

        call mztrmm('R','U','N','N',len,m,zone,s(1),m,x(1),len)   
  end if

  t1 = dzero
  !
  !     shift hamiltonian just enough to make it negative definite
  !
  ham%shift = dzero! eval(neig) + egap * dqtr + pw_params%shiftsafety  

  if (iand(pw_params%output(1), 536870912 ) == 536870912 ) then
     write(9,*) '               RHO               ENERGY'
     write(9,*) '            --------           ---------'    
  end if
 
  nreset = 0
  nover_cnt=0
  do n = 1, maxit                   ! ----------- start of big iteration loop
100 continue                                                       ! restart
    if (ireset) then  

      if (iand(pw_params%output(1), 8) == 8) call get_timing(time(4),t2)
      call apply_ham_wavefn(time,pw_params%output(1), y(1, 1), ham, x(1), &
             m, ews(1, 1), pw_params%nbandsfft)                     ! y=H * x  
      num_HPsi=num_Hpsi+1
      if (iand(pw_params%output(1), 1) == 1 .or. &
           iand(pw_params%output(1), 8) == 8 ) t2 = gimmetime()  
      call overlap_matrix(eps(1), x(1), y(1, 1), m, len)      ! eps = x^T*y
      if (iand(pw_params%output(1), 1) == 1 ) then  
        t1 = t1 + gimmetime() - t2  
        nops = nops + 1.2d1 * real(m * m * len, dp)
      end if
      if (iand(pw_params%output(1), 8) == 8) call get_timing(time(6),t2)
      ireset = .false.                              ! no resetting any more


      call  occsp_diag_scal(myproc,eps,m,ham%gspace%nproc,eval,g,len*m,rwork)

      if (iand(pw_params%output(1), 8) == 8) call get_timing(time(3),t2)
!
!     combine the eigenvectors into g
!
      call mzgemm('N','N',len,m,m, zone, x(1),len, eps(1),m, zzero,g(1,1),len) 
      call mzcopy(len*m, g(1,1), 1, x(1), 1); !   x <- g 
      call mzgemm('N','N',len,m,m, zone,y(1,1),len,eps(1),m,zzero, gp(1,1),len)
      call mzcopy(len*m, gp(1,1), 1, y(1,1), 1); !   y=gp
 
      eps=zzero
      do i=1,m
       eps(i+(i-1)*m)=cmplx(eval(i),dzero,dp)
      end do

      energy1=dzero
      if (iter .eq. 1) then
        do i=1,m
          energy1=energy1 + eval(i) 
        end do
      else
        do i=1,m
          energy1=energy1 + eval(i)*occ(i) 
        end do
      end if
      energy_old=energy1
  
    else  

      if (iand(pw_params%output(1), 8) == 8) call get_timing(time(4),t2)

      if (rho .gt. 1d0) then
        call cheap_overlap_matrix(s(1),x(1),m,len) ! s = x^T*x
        call occsp_sqrtinv_scal('U','n',myproc,s,m,ham%gspace%nproc)

        if (iand(pw_params%output(1), 8) == 8) call get_timing(time(3),t2)
        call mztrmm('R','U','N','N',len,m,zone,s(1),m,x(1),len)     
        call mztrmm('R','U','N','N',len,m,zone,s(1),m,y(1,1),len)
        if (iand(pw_params%output(1), 8) == 8) call get_timing(time(7),t2)
      end if

      call overlap_matrix(eps(1), x(1), y(1, 1), m, len)      ! eps = x^T*y
      if (iand(pw_params%output(1), 8) == 8) call get_timing(time(6),t2)
      !
      !  DIAGONALIZE
      ! 

      call  occsp_diag_scal(myproc,eps,m,ham%gspace%nproc,eval,g,len*m,rwork)
      if (iand(pw_params%output(1), 8) == 8) call get_timing(time(3),t2)
      !
      !     combine the eigenvectors into g
      !
      call mzgemm('N','N',len,m,m, zone, x(1),len, eps(1),m, zzero,g(1,1),len) 
      call mzcopy(len*m, g(1,1), 1, x(1), 1); !   x <- g 

      call mzgemm('N','N',len,m,m, zone,y(1,1),len,eps(1),m,zzero, gp(1,1),len)
      call mzcopy(len*m,gp(1,1),1,y(1,1),1) !   y=gp
   


      if (rho .gt. 1d0) &
         call mztrmm('R','U','N','N',len,m,zone,s(1),m,gold(1,1),len)


      call mzgemm('N','N',len,m,m, zone,gold(1,1),len,&
             eps(1),m,zzero, gp(1,1),len)
      gold=gp


      if (rho .gt. 1d0) &
        call mztrmm('R','U','N','N',len,m,zone,s(1),m,h(1,1),len)


      call mzgemm('N','N',len,m,m, zone,h(1,1),len,&
             eps(1),m,zzero, gp(1,1),len)
      h=gp


      eps=zzero
      do i=1,m
       eps(i+(i-1)*m)=cmplx(eval(i),dzero,dp)
      end do

      energy1=dzero
      if (iter .eq. 1) then
         do i=1,m
           energy1=energy1 + eval(i) !eps(i+(i-1)*m)
         end do
      else
         do i=1,m
           energy1=energy1 + eval(i)*occ(i) !eps(i+(i-1)*m)*occ(i)
          end do
      end if
!      energy_old=energy1
    end if

    call mzcopy(len*m,x(1),1,g(1,1),1)
    do i=1,m
      call mzdscal(len,-eval(i),g(1,i),1)     
    end do
  
    if (iand(pw_params%output(1), 8) == 8) call get_timing(time(7),t2)
    call mzaxpy(len*m, zone, y(1,1), 1, g(1,1), 1)
    !
    !        make conjugate
    !
    !prepare for precondi
    call mzcopy(len * m, g(1, 1), 1, gp(1, 1), 1)  
    !
    !        change the preconditioning energy during the iteration.
    !        this is not good style, since it effectively changes the
    !        matrix under consideration, and we lose the property of
    !        conjugation. we tried it out, and it doesn't hurt performance.
    !        the factor of 1.35 was found by numerical experiment to give
    !        best performance. Smaller factors are dangerous, as they kill
    !        good components, and that hurts a lot.
    !
    eprecond=average_ekin(x(1),s(1), ham%gspace%ekin(1),m,len)*1.35d0

    call precondition(gp(1, 1), eprecond, ham%ekinmod(1), &
          ham%gspace%ekin(1), m, len)

    if (iand(pw_params%output(1), 8) == 8) call get_timing(time(4),t2)
    call overlap_matrix(s(1),x(1),gp(1,1),m,len) ! eps = x^T*y
    if (iand(pw_params%output(1), 8) == 8)  call get_timing(time(6),t2)

    call mzgemm('N','N',len,m,m, zmone, x(1),len,s(1), m, &
             zone,gp(1,1),len)  
    if (iand(pw_params%output(1), 8) == 8) call get_timing(time(7),t2)  

    call mzcopy(len*m,gp(1,1),1,g(1,1),1)  

    call precondition_inv(g(1,1),eprecond,ham%ekinmod(1), &
             ham%gspace%ekin(1), m,len)

    if (iter .gt. 1 .or. (ilog .gt. 0 .and. lrwfn) ) then 
      do i=1,neig/2
         occ_wt=done
          call mzdscal(len,occ_wt,g(1,i),1)
      end do
  
      do i=neig/2+1,neig
        occ_wt=occ(i)
        if (energy_diff .gt. 1d0 .or. iter .eq. 2) then
          if (occ_wt .gt. .95d0) occ_wt=done
        else if(energy_diff .gt. 1d-2) then
          if (occ_wt .gt. .75d0) occ_wt=done
        else if(energy_diff .gt. 1d-4) then
          if (occ_wt .gt. 5d0) occ_wt=done
        else if(energy_diff .gt. 1d-6) then
          if (occ_wt .gt. .25d0) occ_wt=done
        else 
          if (occ_wt .gt. 1d-4)    occ_wt=done
        end if
          call mzdscal(len,occ_wt,g(1,i),1)
      end do
       
    end if


        
    rho = dble(parallel_zdotc(len*m,gp(1,1),1,g(1,1),1)) 
  
    rho=abs(rho)
    if((n.gt.1).and. (.not.ireset)) then
!      step for Polak-Ribiere. Fletcher-Reeves would not require gold,
!      but is performing terribly in many cases. 
      delrho = dble(parallel_zdotc(len*m,gold(1,1),1,g(1,1),1))
      delrho=abs(delrho)
      dcgamma =cmplx((rho-delrho)/oldrho,0.d0,kind=8)
!        save gradient into old gradient
      call mzcopy(len*m, gp(1,1), 1, gold(1,1), 1) 
!     dcgamma = cmplx(rho/oldrho) ! -------- do this for fletcher-Reeves
      call mzaxpy(len*m, dcgamma, h(1,1), 1, gp(1,1), 1)
    endif

    if (iand(pw_params%output(1), 536870912 ) == 536870912 ) &
       write(9,*) 'gmcg iter #',n+nover_cnt,rho,energy1
    call myflush(9)
    if (n .eq. 1) rho_init=rho 

    call mzcopy(len*m, gp(1,1), 1, h(1,1), 1)
  
    oldrho = rho  
    if (rho < delta ) then  
        if (n.eq.1) return
        iconv = .true.  
        goto 200  
    end if

    num = dble(parallel_zdotc(len*m,g(1,1),1,h(1,1),1))

    if (iand(pw_params%output(1), 8) == 8) call get_timing(time(4),t2)
    call apply_ham_wavefn(time,pw_params%output(1), g(1,1),ham, &
             h(1,1),m,ews(1,1),pw_params%nbandsfft)  ! g=H * h
            num_HPsi=num_Hpsi+1
    if (iand(pw_params%output(1), 8) == 8)  t2=gimmetime()
              
    call mzcopy(len*m,h(1,1),1,gp(1,1),1)
    do i=1,m
      call mzdscal(len,-eval(i),gp(1,i),1)     
    end do
    if (iand(pw_params%output(1), 8) == 8) call get_timing(time(7),t2)

    call mzaxpy(len*m, zone, g(1,1), 1, gp(1,1), 1)
          
    if (iter .gt. 1 .or. (ilog .gt. 0 .and. lrwfn) ) then  
 
      do i=1,neig/2
         occ_wt=done
          call mzdscal(len,occ_wt,g(1,i),1)
      end do
  
      do i=neig/2+1,neig
        occ_wt=occ(i)
        if (energy_diff .gt. 1d0 .or. iter .eq. 2) then
          if (occ_wt .gt. .95d0) occ_wt=done
        else if(energy_diff .gt. 1d-2) then
          if (occ_wt .gt. .75d0) occ_wt=done
        else if(energy_diff .gt. 1d-4) then
          if (occ_wt .gt. 5d0) occ_wt=done
        else if(energy_diff .gt. 1d-6) then
          if (occ_wt .gt. .25d0) occ_wt=done
        else      
          if (occ_wt .gt. 1d-4)   occ_wt=done
        end if
        call mzdscal(len,occ_wt,gp(1,i),1)
      end do
    end if
    denom=dble(parallel_zdotc(len*m,h(1,1),1,gp(1,1),1))
    lambda=num/denom

    if (lambda .gt. done) lambda=done
    if (lambda .lt. 0d0) then
      write(9,*) lambda,num,denom,' reset'
      nreset = nreset+1
      ireset=.true.
      if(nreset+n.gt.maxit+pw_params%itdiag_add_metal) goto 199 ! too many resets ... bye bye
      go to 100
    else
      dclambda=lambda      
      ireset=.false.
    end if
    call mzaxpy(len*m, -dclambda, h(1,1), 1, x(1), 1)
    call mzaxpy(len*m,-dclambda, g(1,1), 1, y(1,1), 1)

    if (n .eq. maxit .and. rho .gt. .3*rho_init  .and. &
                      nover_cnt .lt. pw_params%itdiag_add_metal)then
      nover_cnt=nover_cnt+1
      go to 100
    end if

     !cjp write(9, 991) n, m, rho, ham%shift  
  end do                              ! ----------- end of big iteration loop

991 format('iter',I5,' m=',I5,' rho=',G14.8,' shift',F14.8)  
199 continue  

  iconv = .false.  

200 continue  
  !  
  !     the vectors x we have now span the right subspace, but are not yet
  !     eigenvectors. to get those, we diagonalize the epsilon matrix.
  !     the eigenvalues are the eigenvalues we are looking for.
  !     the eigenvectors tell us how to superimpose the vectors x to get
  !     the true eigenvalues.
  !     There are parallel issues here: If the eps matrix is not
  !     exactly identical, the eigenvectors will acquire a different
  !     phase on different processors. Therefore, we diagonalize only
  !     on proc 0, and broadcast the result.
  !
  !
  if (iand(pw_params%output(1), 8) == 8) call get_timing(time(4),t2)
  if (.not. iconv) &
     write(9,'(a,i3,a,g12.6)') ' after ',n+nover_cnt-1,' iter., residual error = ',rho
  call cheap_overlap_matrix(s,x,m,len);
  if (iand(pw_params%output(1), 8) == 8) call get_timing(time(6),t2)

  call occsp_sqrtinv_scal('U','n',myproc,s,m,ham%gspace%nproc)

  if (iand(pw_params%output(1), 8) == 8) call get_timing(time(3),t2)

  call mztrmm('R','U','N','N',len,m,zone,s(1),m,x(1),len)     
  call mztrmm('R','U','N','N',len,m,zone,s(1),m,y(1,1),len)

  if (iand(pw_params%output(1), 8) == 8) call get_timing(time(7),t2)

  call overlap_matrix(eps(1),x(1),y(1,1),m,len) ! eps = x^T*y
  !
  !  DIAGONALIZE
  ! 
  call  occsp_diag_scal(myproc,eps,m,ham%gspace%nproc,eval,g,len*m,rwork)

  if (iand(pw_params%output(1), 8) == 8) call get_timing(time(3),t2)
  !
  !     combine the eigenvectors into g
  !
  call mzgemm('N','N',len,m,m, zone, x(1),len, eps(1),m, zzero, g(1,1), len)
  if (iand(pw_params%output(1), 8) == 8) call get_timing(time(7),t2)
  call mzcopy(len*m, g(1,1), 1, x(1), 1); !   x <- g 
  !
  !     save the eigenvalues
  !
  eps=zzero
  do i=1,m
    eps(i+(i-1)*m)=cmplx(eval(i),dzero,dp)
  end do

  do i=1,m
    s(i)=cmplx(eval(i)+ham%shift,0.d0,kind=8)
  end do

  if (rho/m .lt. 1d-2 .and. iter .gt. 1) then
    do i=1,m
      if (occ(i) .lt. 1d-12) exit
    end do
   neig = min(m,i+15)            ! return number of eigenvectors calculated 
  end if

!  neig = m                  ! return number of eigenvectors calculated 
  !
  !     retrieve eigenvalues
  !
  eval(1:m)=dble(s(1:m))
!  eval(m+1)=eval(m) !+egap    ! and remember gap
  !
  !     performance printout
  !
  if (iand(pw_params%output(1), 1) == 1) write(9, 920) t1, nops / t1 * 1.0d-6
  !
  !     timing printout
  !
  if (iand (pw_params%output(1), 8) == 8) then  
     write(9, 910) n+nover_cnt-1, gimmetime() - t0  
     call myflush(9)  
  end if

  if (iand(pw_params%output(1), 8) == 8) call get_timing(time(4),t2)
  !
  !     deallocate the work spaces
  !
  deallocate(s)
  deallocate(eps) 
  deallocate(rwork)
  if (ham%vnloc%nvecs > 0 .and. .not. ham%pspot%NL_rspace(1)) deallocate(ews) 
  deallocate(g)
  deallocate(gold)
  deallocate(h)
  deallocate(gp)
  deallocate(y)
  deallocate(iord)

  return
  
910  format(' DIAGONALIZATION TOOK ',i3,' ITERATIONS AND ', &
          &     f12.3, ' SECONDS')
920  format(' TIME FOR MATRIX-MATRIX:',f12.6,', MFLOPS=',f12.6)  
930  format('*** DIAGONALIZE_HAMILTONIAN: ALLOCATE(',a,'(',i6, &
          &        ',',i4,') FAILED. ERROR CODE=',i4)

end subroutine  diag_ham_metal_gcg


subroutine get_timing(time,t0)
  use constants 
  IMPLICIT NONE


  integer n
  real(dp) time,t0
  real(dp), external :: gimmetime

  time=time+gimmetime() - t0
  t0=gimmetime()

  return

end subroutine get_timing
