!
module all_to_all_module
  !
  !     first some global variables. 
  !
  use constants

  integer :: ata_nproc         ! number of processors
m4_ifdef([SHMEM],[
  complex(dp) :: ata_target_dc_buf(1)
  pointer(ata_target_dc_buf_p, ata_target_dc_buf)
  complex(dp) :: ata_source_dc_buf(1)
  pointer(ata_source_dc_buf_p, ata_source_dc_buf)
  integer :: ata_pSync(1)
  pointer(ata_pSync_p, ata_pSync)
  complex(dp) ata_pWrk(1)
  pointer(ata_pWrk_p, ata_pWrk)
  integer :: ata_pWrk_len      ! length of the pWrk array
  integer :: ata_dc_buf_len    ! length of the complex(dp) work arrays
])
  
contains

  subroutine allocate_shmem_work(nproc,len)

    implicit none
    integer, intent(in) :: nproc, len
    integer :: ierr
m4_ifdef([SHMEM],[
    include 'mpp/shmem.fh'

    ata_nproc = nproc
    !
    !     allocate the sync array once and forever
    !
    call shpalloc(ata_pSync_p, SHMEM_REDUCE_SYNC_SIZE, ierr, -1)
    ata_pSync(1:SHMEM_REDUCE_SYNC_SIZE) = SHMEM_SYNC_VALUE
    !
    !     allocate the pWrk array
    !
    call shpalloc(ata_pWrk_p,max((len/2+1)*2, &
         SHMEM_REDUCE_MIN_WRKDATA_SIZE), ierr, -1)
    ata_pWrk_len = len
    !
    !     allocate the complex(dp) buffers
    !
    call shpalloc(ata_target_dc_buf_p, 2*len, ierr, -1)
    call shpalloc(ata_source_dc_buf_p, 2*len, ierr, -1)
    ata_dc_buf_len = len
])
   
  end subroutine allocate_shmem_work

  subroutine deallocate_shmem_work()

    implicit none
    integer :: ierr
m4_ifdef([SHMEM],[
    include 'mpp/shmem.fh'

    call shpdeallc(ata_pSync_p, ierr, -1)
    call shpdeallc(ata_pWrk_p, ierr, -1)
    ata_pWrk_len = 0
    !
    !     deallocate the complex(dp) work arrays
    !
    call shpdeallc(ata_target_dc_buf_p, ierr, -1)
    call shpdeallc(ata_source_dc_buf_p, ierr, -1)
    ata_dc_buf_len = 0
])

  end subroutine deallocate_shmem_work
  !
  !     allocs and initializes the global reduction work arrays
  !     required  for shmem
  !
  subroutine fast_all_sum_all_alloc_dc(len)

    implicit none
    integer, intent(in) :: len        ! number of elements to be reduced
    integer :: ierr
m4_ifdef([SHMEM],[
    include 'mpp/shmem.fh'

    if (len > ata_dc_buf_len) then
       call shpdeallc(ata_target_dc_buf_p, ierr, -1)
       call shpdeallc(ata_source_dc_buf_p, ierr, -1)
       call shpalloc(ata_target_dc_buf_p, 2*len, ierr, -1)
       call shpalloc(ata_source_dc_buf_p, 2*len, ierr, -1)
       ata_dc_buf_len = len
    end if
    if(len > ata_pWrk_len) then
       call shpdeallc(ata_pWrk_p, ierr, -1)
       call shpalloc(ata_pWrk_p, max((len/2+1)*2, &
            SHMEM_REDUCE_MIN_WRKDATA_SIZE), ierr, -1)
       ata_pWrk_len = len
    end if
])

  end subroutine fast_all_sum_all_alloc_dc

m4_ifdef([INT4],[m4_define([MPI_INTEGER4],[MPI_INTEGER])])
m4_ifdef([CRAY],[m4_define([MPI_INTEGER4],[MPI_INTEGER])])
  !
  !     ================ summation subroutines ==============================
  !
  !     this subroutine uses the fast shmem routines,
  !     but needs a call to the allocation routine before
  !     it is called the first time
  !
  subroutine fast_all_sum_all_complex(data, len)

    implicit none
m4_ifdef([MPI],[include 'mpif.h'])
    integer :: ierr
    integer, intent(in) :: len
    complex(dp), intent(inout) :: data(*)

m4_ifdef([SHMEM],[
    ata_source_dc_buf(1:len) = data(1:len)
    call barrier()
    call shmem_comp8_sum_to_all(ata_target_dc_buf, &
         ata_source_dc_buf, len, 0, 0, ata_nproc, &
         ata_pWrk, ata_pSync)
    data(1:len) = ata_target_dc_buf(1:len)
],[
    !
    !     just the regular thing for MPI
    !
m4_ifdef([MPI],[      
    complex(dp), allocatable :: mpibuf(:)
    if (len <= 0) return
    allocate(mpibuf(len))
    call mpi_allreduce(data(1), mpibuf(1), len, &
         MPI_DOUBLE_COMPLEX, MPI_SUM, MPI_COMM_WORLD, ierr)
    data(1:len) = mpibuf(1:len)
    deallocate(mpibuf)
])
])

  end subroutine fast_all_sum_all_complex

  subroutine all_sum_all_complex(data, len)

    implicit none
m4_ifdef([MPI],[include 'mpif.h'])
    integer :: ierr
    integer, intent(in) :: len
    complex(dp), intent(inout) :: data(*)
    complex(dp), allocatable :: mpibuf(:)

m4_ifdef([MPI],[      
    if (len <= 0) return
    allocate(mpibuf(len))
    call mpi_allreduce(data(1), mpibuf(1), len, &
         MPI_DOUBLE_COMPLEX, MPI_SUM, MPI_COMM_WORLD, ierr)
    data(1:len) = mpibuf(1:len)
    deallocate(mpibuf)
])

  end subroutine all_sum_all_complex

  subroutine all_sum_all_complex1(data)

    implicit none
m4_ifdef([MPI],[include 'mpif.h'])
    integer :: ierr
    complex(dp), intent(inout) :: data
    complex(dp) :: mpibuf

m4_ifdef([MPI],[      
    call mpi_barrier(MPI_COMM_WORLD, ierr)
    call mpi_allreduce(data,mpibuf,1, &
         MPI_DOUBLE_COMPLEX, MPI_SUM, MPI_COMM_WORLD, ierr)
    data = mpibuf
])

  end subroutine all_sum_all_complex1

  subroutine all_sum_all_complex2(data, len)

    implicit none
m4_ifdef([MPI],[include 'mpif.h'])
    integer :: ierr
    integer, intent(in) :: len
    complex(dp), intent(inout) :: data(:,:)
    complex(dp), allocatable :: mpibuf(:,:)

m4_ifdef([MPI],[      
    if (len <= 0) return
    allocate(mpibuf(size(data,1),size(data,2)))
    call mpi_barrier(MPI_COMM_WORLD, ierr)

    call mpi_allreduce(data(1,1), mpibuf(1,1), len, &
         MPI_DOUBLE_COMPLEX, MPI_SUM, MPI_COMM_WORLD, ierr)
    data = mpibuf
    deallocate(mpibuf)
])

  end subroutine all_sum_all_complex2

  subroutine all_sum_all_complex3(data, len)

    implicit none
m4_ifdef([MPI],[include 'mpif.h'])
    integer :: ierr
    integer, intent(in) :: len
    complex(dp), intent(inout) :: data(:,:,:)
    complex(dp), allocatable :: mpibuf(:,:,:)

m4_ifdef([MPI],[      
    if (len <= 0) return
    allocate(mpibuf(size(data,1),size(data,2),size(data,3)))
    call mpi_barrier(MPI_COMM_WORLD, ierr)

    call mpi_allreduce(data(1,1,1), mpibuf(1,1,1), len, &
         MPI_DOUBLE_COMPLEX, MPI_SUM, MPI_COMM_WORLD, ierr)
    data = mpibuf
    deallocate(mpibuf)
])

  end subroutine all_sum_all_complex3

  subroutine all_sum_all_complex4(data, len)

    implicit none
m4_ifdef([MPI],[include 'mpif.h'])
    integer :: ierr
    integer, intent(in) :: len
    complex(dp), intent(inout) :: data(:,:,:,:)
    complex(dp), allocatable :: mpibuf(:,:,:,:)

m4_ifdef([MPI],[      
    if (len <= 0) return
    allocate(mpibuf(size(data,1),size(data,2),size(data,3), &
         size(data,4)))
    call mpi_barrier(MPI_COMM_WORLD, ierr)

    call mpi_allreduce(data(1,1,1,1), mpibuf(1,1,1,1), len, &
         MPI_DOUBLE_COMPLEX, MPI_SUM, MPI_COMM_WORLD, ierr)
    data = mpibuf
    deallocate(mpibuf)
])

  end subroutine all_sum_all_complex4

  subroutine all_sum_all_complex_sub(comm, data, len)

    implicit none
m4_ifdef([MPI],[include 'mpif.h'])
    integer :: ierr
    integer, intent(in) :: len, comm
    complex(dp), intent(inout) :: data(*)
    complex(dp), allocatable :: mpibuf(:)

m4_ifdef([MPI],[      
    if(len <= 0) return
    allocate(mpibuf(len))

    call mpi_allreduce(data(1), mpibuf(1), len, &
         MPI_DOUBLE_COMPLEX, MPI_SUM, comm, ierr)
    data(1:len) = mpibuf(1:len)
    deallocate(mpibuf)
])

  end subroutine all_sum_all_complex_sub

  subroutine all_sum_all_complex1_sub(comm, data)

    implicit none
m4_ifdef([MPI],[include 'mpif.h'])
    integer :: ierr
    integer, intent(in) :: comm
    complex(dp), intent(inout) :: data
    complex(dp) :: mpibuf

m4_ifdef([MPI],[      
    call mpi_allreduce(data, mpibuf, 1, &
         MPI_DOUBLE_COMPLEX, MPI_SUM, comm, ierr)
    data = mpibuf
])

  end subroutine all_sum_all_complex1_sub

  subroutine all_sum_all_double(data, len)

    implicit none
m4_ifdef([MPI],[include 'mpif.h'])
    integer :: ierr
    integer, intent(in) :: len
    real(dp), intent(inout) :: data(len)
    real(dp), allocatable :: mpibuf(:)

m4_ifdef([MPI],[      
    if (len <= 0) return
    allocate(mpibuf(len))
    call mpi_barrier(MPI_COMM_WORLD, ierr)

    call mpi_allreduce(data(1), mpibuf(1), len, &
         MPI_DOUBLE_PRECISION, MPI_SUM, MPI_COMM_WORLD, ierr)
    data = mpibuf
    deallocate(mpibuf)
])

  end subroutine all_sum_all_double

  subroutine all_sum_all_double1(data)

    implicit none
m4_ifdef([MPI],[include 'mpif.h'])
    integer :: ierr
    real(dp), intent(inout) :: data
    real(dp) :: databuf

m4_ifdef([MPI],[      
    call mpi_barrier(MPI_COMM_WORLD, ierr)

    call mpi_allreduce(data, databuf, 1, &
         MPI_DOUBLE_PRECISION, MPI_SUM, MPI_COMM_WORLD, ierr)
    data = databuf
])

  end subroutine all_sum_all_double1

  subroutine all_sum_all_double2(data, len)

    implicit none
m4_ifdef([MPI],[include 'mpif.h'])
    integer :: ierr
    integer, intent(in) :: len
    real(dp), intent(inout) :: data(:,:)
    real(dp), allocatable :: mpibuf(:,:)

m4_ifdef([MPI],[      
    if (len <= 0) return
    allocate(mpibuf(size(data,1),size(data,2)))
    call mpi_barrier(MPI_COMM_WORLD, ierr)

    call mpi_allreduce(data(1,1), mpibuf(1,1), len, &
         MPI_DOUBLE_PRECISION, MPI_SUM, MPI_COMM_WORLD, ierr)
    data = mpibuf
    deallocate(mpibuf)
])

  end subroutine all_sum_all_double2

  subroutine all_sum_all_double3(data, len)

    implicit none
m4_ifdef([MPI],[include 'mpif.h'])
    integer :: ierr
    integer, intent(in) :: len
    real(dp), intent(inout) :: data(:,:,:)
    real(dp), allocatable :: mpibuf(:,:,:)

m4_ifdef([MPI],[      
    if (len <= 0) return
    allocate(mpibuf(size(data,1),size(data,2),size(data,3)))
    call mpi_barrier(MPI_COMM_WORLD, ierr)

    call mpi_allreduce(data(1,1,1), mpibuf(1,1,1), len, &
         MPI_DOUBLE_PRECISION, MPI_SUM, MPI_COMM_WORLD, ierr)
    data = mpibuf
    deallocate(mpibuf)
])

  end subroutine all_sum_all_double3

  subroutine all_sum_all_integer(data, len)

    implicit none
m4_ifdef([MPI],[include 'mpif.h'])
    integer :: ierr
    integer, intent(in) :: len
    integer, intent(inout) :: data(*)
    integer, allocatable :: mpibuf(:)

m4_ifdef([MPI],[      
    if (len <= 0) return
    allocate(mpibuf(len))
    call mpi_barrier(MPI_COMM_WORLD, ierr)

    call mpi_allreduce(data, mpibuf, len, &
         MPI_INTEGER4, MPI_SUM, MPI_COMM_WORLD, ierr)
    data(1:len) = mpibuf(1:len)
    deallocate(mpibuf)
])

  end subroutine all_sum_all_integer

  subroutine all_sum_all_integer1(data)

    implicit none
m4_ifdef([MPI],[include 'mpif.h'])
    integer :: ierr
    integer, intent(inout) :: data
    integer :: databuf

m4_ifdef([MPI],[      
    call mpi_barrier(MPI_COMM_WORLD, ierr)

    call mpi_allreduce(data, databuf, 1, &
         MPI_INTEGER4, MPI_SUM, MPI_COMM_WORLD, ierr)
    data = databuf
])

  end subroutine all_sum_all_integer1
  !
  !     ================= maximum subroutines ===========================
  !
  subroutine all_max_all_double1(data)

    implicit none
m4_ifdef([MPI],[include 'mpif.h'])
    integer :: ierr
    real(dp), intent(inout) :: data
    real(dp) :: mpibuf

m4_ifdef([MPI],[      
    call mpi_barrier(MPI_COMM_WORLD, ierr)

    call mpi_allreduce(data, mpibuf, 1, &
         MPI_DOUBLE_PRECISION, MPI_MAX, MPI_COMM_WORLD, ierr)
    data = mpibuf
])

  end subroutine all_max_all_double1

  subroutine all_min_all_double1(data)

    implicit none
m4_ifdef([MPI],[include 'mpif.h'])
    integer :: ierr
    real(dp), intent(inout) :: data
    real(dp) :: mpibuf

m4_ifdef([MPI],[      
    call mpi_barrier(MPI_COMM_WORLD, ierr)

    call mpi_allreduce(data, mpibuf, 1, &
         MPI_DOUBLE_PRECISION, MPI_MIN, MPI_COMM_WORLD, ierr)
    data = mpibuf
])

  end subroutine all_min_all_double1

  subroutine all_max_all_int1(data)

    implicit none
m4_ifdef([MPI],[include 'mpif.h'])
    integer :: ierr
    integer, intent(inout) :: data
    integer :: mpibuf

m4_ifdef([MPI],[      
    call mpi_barrier(MPI_COMM_WORLD, ierr)

    call mpi_allreduce(data, mpibuf, 1, &
         MPI_INTEGER4, MPI_MAX, MPI_COMM_WORLD, ierr)
    data = mpibuf
])

  end subroutine all_max_all_int1

  subroutine all_max_all_int2(data,comm)

    implicit none
m4_ifdef([MPI],[include 'mpif.h'])
    integer :: ierr
    integer, intent(inout) :: data
    integer :: mpibuf,comm

m4_ifdef([MPI],[      
    call mpi_barrier(MPI_COMM_WORLD, ierr)

    call mpi_allreduce(data, mpibuf, 1, &
         MPI_INTEGER4, MPI_MAX, comm, ierr)
    data = mpibuf
])

  end subroutine all_max_all_int2
  !
  !     ================= broadcast subroutines ===========================
  !
  subroutine my_broadcast_int1(data, root)

    implicit none
m4_ifdef([MPI],[include 'mpif.h'])
    integer :: ierr
    integer :: data
    integer :: root

m4_ifdef([MPI],[      
    call mpi_barrier(MPI_COMM_WORLD, ierr)

    call mpi_bcast(data, 1, MPI_INTEGER4, &
         root, MPI_COMM_WORLD, ierr)
])

  end subroutine my_broadcast_int1

  subroutine my_broadcast_int1_smcomm(data, root,comm)

    implicit none
m4_ifdef([MPI],[include 'mpif.h'])
    integer :: ierr
    integer :: data
    integer :: root,comm

m4_ifdef([MPI],[      

    call mpi_bcast(data, 1, MPI_INTEGER4, &
         root, comm, ierr)
])

  end subroutine my_broadcast_int1_smcomm

  subroutine my_broadcast_int(data, count, root)

    implicit none
m4_ifdef([MPI],[include 'mpif.h'])
    integer :: ierr
    integer, intent(in) :: count
    integer, intent(inout) :: data
    integer, intent(in) :: root

m4_ifdef([MPI],[      
    call mpi_barrier(MPI_COMM_WORLD, ierr)

    call mpi_bcast(data, count, MPI_INTEGER4, &
         root, MPI_COMM_WORLD, ierr)
])

  end subroutine my_broadcast_int

  subroutine my_broadcast_dcmplx(data, count, root)

    implicit none
m4_ifdef([MPI],[include 'mpif.h'])
    integer :: ierr
    integer, intent(in) :: count
    complex(dp), intent(inout) :: data(count)
    integer, intent(in) :: root

m4_ifdef([MPI],[      
    call mpi_barrier(MPI_COMM_WORLD, ierr)

    call mpi_bcast(data(1), count, MPI_DOUBLE_COMPLEX, &
         root, MPI_COMM_WORLD, ierr)
])

  end subroutine my_broadcast_dcmplx

  subroutine my_broadcast_dcmplx_small(data, count, root,comm)
 
    implicit none
m4_ifdef([MPI],[include 'mpif.h'])
    integer :: ierr
    integer, intent(in) :: count
    complex(dp), intent(inout) :: data(count)
    integer, intent(in) :: root,comm

m4_ifdef([MPI],[      

    call mpi_bcast(data(1), count, MPI_DOUBLE_COMPLEX, &
         root, comm, ierr)
])

  end subroutine my_broadcast_dcmplx_small


  subroutine my_broadcast_dcmplx2(data, count, dim, root)

    implicit none
m4_ifdef([MPI],[include 'mpif.h'])
    integer :: ierr
    integer, intent(in) :: count
    integer, intent(in) ::  dim
    complex(dp), intent(inout) :: data(count,dim)
    integer, intent(in) :: root

m4_ifdef([MPI],[      
    call mpi_barrier(MPI_COMM_WORLD, ierr)

    call mpi_bcast(data(1,1), count*dim, MPI_DOUBLE_COMPLEX, &
         root, MPI_COMM_WORLD, ierr)
])

  end subroutine my_broadcast_dcmplx2

  
  subroutine my_broadcast_dcmplx3(data, count,root)

    implicit none
m4_ifdef([MPI],[include 'mpif.h'])
    integer :: ierr
    integer, intent(in) :: count
    complex(dp), intent(inout) :: data
    integer, intent(in) :: root

m4_ifdef([MPI],[      
    call mpi_barrier(MPI_COMM_WORLD, ierr)

    call mpi_bcast(data, count, MPI_DOUBLE_COMPLEX, &
         root, MPI_COMM_WORLD, ierr)
])

  end subroutine my_broadcast_dcmplx3

  subroutine my_broadcast_double(data, count, root)

    implicit none
m4_ifdef([MPI],[include 'mpif.h'])
    integer :: ierr
    integer, intent(in) :: count
    real(dp), intent(inout) :: data(count)
    integer, intent(in) :: root
m4_ifdef([MPI],[      
    call mpi_barrier(MPI_COMM_WORLD, ierr)

    call mpi_bcast(data(1), count, MPI_DOUBLE_PRECISION, &
         root, MPI_COMM_WORLD, ierr)
])

  end subroutine my_broadcast_double

  subroutine my_broadcast_double_smcomm(data, count, root,comm)

    implicit none
m4_ifdef([MPI],[include 'mpif.h'])
    integer :: ierr
    integer, intent(in) :: count
    real(dp), intent(inout) :: data(count)
    integer, intent(in) :: root,comm
m4_ifdef([MPI],[      
    call mpi_bcast(data(1), count, MPI_DOUBLE_PRECISION, &
         root, comm, ierr)
])

  end subroutine my_broadcast_double_smcomm

  subroutine my_broadcast_double1(data, root)

    implicit none
m4_ifdef([MPI],[include 'mpif.h'])
    integer :: ierr
    real(dp), intent(inout) :: data
    integer, intent(in) :: root
m4_ifdef([MPI],[      
    call mpi_barrier(MPI_COMM_WORLD, ierr)

    call mpi_bcast(data, 1, MPI_DOUBLE_PRECISION, &
         root, MPI_COMM_WORLD, ierr)
])

  end subroutine my_broadcast_double1

  subroutine my_broadcast_double3(data, count, root)

    implicit none
m4_ifdef([MPI],[include 'mpif.h'])
    integer :: ierr
    integer, intent(in) :: count
    real(dp), intent(inout) :: data
    integer, intent(in) :: root
m4_ifdef([MPI],[      
    call mpi_barrier(MPI_COMM_WORLD, ierr)

    call mpi_bcast(data, count, MPI_DOUBLE_PRECISION, &
         root, MPI_COMM_WORLD, ierr)
])

  end subroutine my_broadcast_double3

  subroutine my_broadcast_char(data, count, root)

    implicit none
m4_ifdef([MPI],[include 'mpif.h'])
    integer :: ierr
    integer, intent(in) :: count
    character(len=count), intent(inout) :: data
    integer, intent(in) :: root
m4_ifdef([MPI],[      
    call mpi_barrier(MPI_COMM_WORLD, ierr)

    call mpi_bcast(data, count, MPI_CHARACTER, &
         root, MPI_COMM_WORLD, ierr)
])

  end subroutine my_broadcast_char
  !
  !     ================= dot product subroutines =======================
  !
  complex(dp) function parallel_zdotc(n, x, incx, y, incy) 

    implicit none
    include 'flibcalls.ph'
    integer, intent(in) :: n, incx, incy
    complex(dp) :: x(*), y(*)

    parallel_zdotc = mzdotc(n, x(1), incx, y(1), incy)
    call all_sum_all_complex1(parallel_zdotc)
    return

  end function parallel_zdotc

  complex(dp) function parallel_zdotc2(n, x, incx, y, incy) 

    implicit none
    include 'flibcalls.ph'
    integer n, incx, incy
    complex(dp) :: x, y

    parallel_zdotc2 = mzdotc(n, x, incx, y, incy)
    call all_sum_all_complex1(parallel_zdotc2)
    return

  end function parallel_zdotc2
  !
  !     ================ parallel barrier routine =======================
  !
  subroutine parallel_barrier()

    implicit none
m4_ifdef([MPI],[include 'mpif.h'])
    integer :: info

m4_ifdef([MPI],[      
    call mpi_barrier(MPI_COMM_WORLD, info)
])

  end subroutine parallel_barrier
  !
  !
  !     ================ subgroup communication routines =======================
  !
  !     creates communicators and corresponding groups for a list of ranks
  !
  subroutine all_split_all(key, rank, subcomm)

    implicit none
m4_ifdef([MPI],[include 'mpif.h'])
    integer, intent(in) :: rank, key
    integer, intent(out) :: subcomm        ! output
m4_ifdef([MPI],[      
    integer :: info

    call mpi_comm_split(MPI_COMM_WORLD, key, rank, subcomm, info)
],[
    subcomm = 0
])

  end subroutine all_split_all

end module all_to_all_module
