!
subroutine rdiag_scalapack(context, n, nb, nprow, npcol, a, nc, nr, w)
  !
  use all_to_all_module
  implicit none
  include 'all_to_all.h'
  !
  !     INPUT:
  !     -----
  !
  integer, intent(in) :: &
       context, &           ! the blacs context
       n, &                 ! matrix size
       nb, &                ! block size
       nc,nr, &             ! number of rows and columns local to this proc
       nprow, &             ! number of processor grid rows
       npcol                ! number of processor grid columns
  !
  !     INPUT/OUTPUT:
  !     ------------
  !
  real(dp), intent(inout) :: &
       a(nr, nc)            ! the matrix to be diagonalized (destroyed)
  !
  !     OUTPUT:
  !     ------
  !
real(dp), intent(inout) :: &
       w(n)                 ! all eigenvalues found
  !
  !     -------------- local variables ----------------------------
  !

m4_ifdef([SCALAPACK],[
  include 'scalapack.h'
  integer :: &
       info, i, j, &
       nn, nnp, np0, mq0, lwork, liwork, &
       neig, &              ! number of eigenvalues sought for
       nfound, &            ! number of eigenvalues found
       nzfound, &           ! number of eigenvectors found
       lda, &               ! leading dimension
       iam, &               ! blacs myproc
       nproc                ! hopefully the same as mpi nproc
  integer :: &
       desca(lld_), &       ! descriptor for the matrix
       descz(lld_)          ! descriptor for the vectors
  real(dp), parameter :: &
       abstol = 1.0d-8, &
       orfac = abstol * 1.0d2
  integer, parameter :: izero = 0, &
       clustersize = 20     ! max size of eigenvalue clusters

m4_ifdef([CRAY],[
  integer :: errcode
  real(dp) :: work(1)
  integer :: iwork(1)

  pointer(work_p, work)
  pointer(iwork_p, iwork)

  integer :: abuflen
  real(dp) :: abuf(1), zbuf(1)
  pointer(abuf_p, abuf)
  pointer(zbuf_p, zbuf)
],[
  real(dp), allocatable :: work(:), z(:,:)
  integer, allocatable :: iwork(:)
])
  !
  !     those can always be non-aligned -> use F90
  !
  real(dp), allocatable :: gap(:)
  integer, allocatable :: ifail(:), iclustr(:)
  real(dp) :: ssum

  lda = nr                  ! close packing
  neig= n                   ! want all eigenvalues

  call descinit(desca, n, n, nb, nb, 0, 0, context, lda, info)
  call descinit(descz, n, n, nb, nb, 0, 0, context, lda, info)

  nn = max(n, nb, 2)
  nnp = max(n, nprow * npcol + 1, 4)
  np0 = numroc(nn, nb, 0, 0, nprow)
  mq0 = numroc(max(neig, nb, 2), nb, 0, 0, npcol)

  lwork = 5 * n + max(5 * nn, np0 * mq0 + 2 * nb * nb) + &
       iceil(neig, nprow * npcol) * nn + (clustersize - 1) * n
  liwork = 6 * nnp

m4_ifdef([CRAY],[
  call all_max_all(lwork)
  call shpalloc(work_p, lwork, errcode, -1)
  call all_max_all(liwork)
  call shpalloc(iwork_p, liwork, errcode, -1)

  abuflen = nr * nc
  call all_max_all(abuflen)
  call shpalloc(abuf_p, abuflen, errcode, -1)
  call shpalloc(zbuf_p, abuflen, errcode, -1)
],[
  lwork =-1
  allocate(work(4))
  liwork =-1
  allocate(iwork(4))


  call pdsyevd( 'V', 'U', n, a(1,1), 1, 1, desca(1), w(1), &
                z(1,1), 1, 1, descz(1), work(1), lwork, iwork(1), &
                liwork, info )

  lwork=work(1)
  deallocate(work)
  liwork=iwork(1)
  deallocate(iwork)
  allocate(z(nr, nc))
  allocate(work(lwork))
  allocate(iwork(liwork))
])
])
m4_ifdef([SCALAPACK],[
  allocate(ifail(n))
  allocate(iclustr(2 * nprow * npcol))
  allocate(gap(nprow * npcol))

m4_ifdef([CRAY],[
  do i = 1, nc
     abuf((i - 1) * nr + 1:i * nr) = a(1:nr, i)
  end do
  call pssyevx('V', 'A', 'U', n, abuf(1), 1, 1, desca(1), dzero, dzero, &
       izero, izero, abstol, nfound, nzfound, w(1), orfac, &
       zbuf(1), 1, 1, descz(1), work(1), lwork, iwork(1), liwork, &
       ifail(1), iclustr(1), gap(1), info)
  do i = 1, nc
     a(1:nr, i) = zbuf((i - 1) * nr + 1:i * nr)
  end do
],[

  call pdsyevd( 'V', 'U', n, a(1,1), 1, 1, desca(1), w(1), &
                z(1,1), 1, 1, descz(1), work(1), lwork, iwork(1), &
                liwork, info )

  a = z
])
m4_ifdef([CRAY],[
  call shpdeallc(work_p, errcode, -1)
  call shpdeallc(iwork_p, errcode, -1)
  call shpdeallc(abuf_p, errcode, -1)
  call shpdeallc(zbuf_p, errcode, -1)
],[
  deallocate(z)
  deallocate(iwork)
  deallocate(work)
])

  deallocate(gap)
  deallocate(iclustr)
  deallocate(ifail)

  if (info == 2) then
     write(9, 100)
  else if (info /= 0) then
     write(9, *) ' *** rdiag_scalapack warning:', &
          ' *** diag failed with info=', info
  end if

  if (nzfound /= nfound) then
     write(9, *) ' *** rdiag_scalapack warning:', &
          ' *** found ', nzfound, ' eigenvalues only !'
  end if

100 format(' *** SCALAPACK WARNING: DEGENERATE EIGENVECTORS NOT',&
       ' ORTHOGONALIZED')
])

end subroutine rdiag_scalapack
