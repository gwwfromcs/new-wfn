!
subroutine fft_workspace(nproc, fftsize, naux, ufbs, t1bufsize, mpistatsize)
  !
  !     determines size of fft workspaces for different machines
  !
  !     1996 Bernd Pfrommer
  !
  use constants
  implicit none             ! nope 
m4_ifdef([MPI],[include 'mpif.h'])
  !
  !     INPUT:
  !     -----
  !
  integer, intent(in) :: &
       nproc, &             ! number of processors
       fftsize(3)           ! size of the 3d fft grid
  !
  !     OUTPUT:
  !     ------
  !
  integer, intent(out) :: &
       ufbs, &              ! unfold buffer size
       t1bufsize, &         ! t1 buffer size
       naux(4), &           ! sizes of the various work arrays needed
       mpistatsize          ! size of mpi status variable
  !
  !     ----------------------- local variables  -----------------------------
  !     
  integer :: i, nmax, ix, iy

  t1bufsize = ((fftsize(1) * fftsize(3)) / nproc + 1) * fftsize(2) ! t1 buffer 
  ufbs = 1

m4_ifdef([MPI],[mpistatsize = MPI_STATUS_SIZE],[mpistatsize = 1])
m4_ifdef([I386],[
  naux(1:3) = fftsize(1:3) + 25
  naux(4)   = 1
]) 
m4_ifdef([SGI_PC],[
  naux(1:3) = fftsize(1:3) + 25
  naux(4)   = 1
]) 
m4_ifdef([HODGKIN],[
  naux(1:3) = fftsize(1:3) + 128  !changes pursuant to Peter Haynes 25 
  naux(4)   = 1
])    
m4_ifdef([RS6K],[
  do i = 1, 3
     naux(i) = 20000
     if (fftsize(i) > 2048) naux(i) = naux(i) + &
          int(2.28d0 * real(fftsize(i), dp))
  end do
  naux(4) = 0 ; nmax = 0
  do i = 1, 3
     if (nmax < naux(i)) then
        nmax = naux(i)
        naux(4) = naux(i) + 64 * (2 * fftsize(i) + 256)
     end if
  end do
])
m4_ifdef([ALPHA],[
  naux(1:3) = 1
  naux(4)   = 1
])      
m4_ifdef([CVX],[
  naux(1:3) = (fftsize(1:3) * 5) / 2
  naux(4)   = 1
])      
m4_ifdef([CRAY],[
  naux(1:3) = 100 + fftsize(1:3)
  !
  !     this defines the maximum size of the work array for the cray ccfftm.
  !
  naux(4) = 2 * max((fftsize(1) * fftsize(2) / nproc + 1) * fftsize(3), &
       (fftsize(2) * fftsize(3) / nproc + 1) * fftsize(1), &
       (fftsize(1) * fftsize(3) / nproc + 1) * fftsize(2))
m4_ifdef([VECTOR],[
  ix = fftsize(1)
  iy = fftsize(2)
  if (mod(ix, 2) == 0) ix = ix + 1
  if (mod(iy, 2) == 0) iy = iy + 1
  ufbs = fftsize(3) * ix * iy * 10
])
])      
m4_ifdef([SUN],[
  naux(1:3) = 4 * fftsize(1:3) + 15
  naux(4)   = 1
])      
m4_ifdef([SR2201],[
  naux(1:3) = 2 * fftsize(1:3) + 25
  naux(4)   = 1
  ix = fftsize(1)
  if (mod(ix, 2) == 0) ix = ix + 1
  ufbs = ix * ((fftsize(2) * fftsize(3)) / nproc + 1)
])

end subroutine fft_workspace

!
!     =====================================================================
!
!     initialize the workspace for those machines where it is
!     necessary and possible
!
!
subroutine fft_iworkspace(workspace, naux, dim)

  !     1997 Bernd Pfrommer
  !
  use constants
  implicit none            
  !
  !     INPUT:
  !     -----
  !
  integer, intent(in) :: &
       naux(4), &           ! sizes of the fft workspace arrays
       dim(3)               ! fft sizes in x, y, z
  !
  !     OUTPUT:
  !     ------
  !
  complex(dp), intent(inout) :: workspace(*)  ! the workspace to be initialized
  !
  !     ---------------------- local variables ---------------------
  !
  FFT_HEADER

  integer :: dwx, dwy, dwz
  real(dp) :: dum

  dwx = 1
  dwy = naux(1) + 1
  dwz = naux(1) + naux(2) + 1

  FFT_PERM_INIT(dim(1), workspace(dwx))
  FFT_PERM_INIT(dim(2), workspace(dwy))
  FFT_PERM_INIT(dim(3), workspace(dwz))

end subroutine fft_iworkspace
